import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { ConfigService } from '@nestjs/config';
import { SupabaseClient } from '@supabase/supabase-js'; // Assuming Supabase client injection
import { Inject } from '@nestjs/common'; // Required for custom provider injection
import { SUPABASE_CLIENT } from '../constants/supabase.constants'; // Correct import path for the injection token from constants

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(
    private configService: ConfigService,
    @Inject(SUPABASE_CLIENT) private supabase: SupabaseClient, // Inject Supabase client
  ) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: configService.get<string>('JWT_SECRET'), // Fetch secret from config
    });
  }

  async validate(payload: any) {
    // Here you might want to fetch the user from Supabase based on payload.sub (user ID)
    // to ensure the user still exists and is active.
    // For simplicity, we'll just return the payload for now.
    // In a real application, you'd fetch the full user profile.

    // Example: Fetch user from Supabase (optional but recommended)
    /*
    const { data: user, error } = await this.supabase
      .from('users') // Use your actual users table name
      .select('*')
      .eq('id', payload.sub) // Assuming 'sub' contains the Supabase user ID
      .single();

    if (error || !user) {
      throw new UnauthorizedException('User not found or error fetching user.');
    }
    // Return the essential user info, not the whole payload or sensitive data
    return { userId: user.id, email: user.email, role: user.role };
    */
    
    // Simple validation returning decoded payload
    if (!payload.sub) {
         throw new UnauthorizedException('Invalid token payload.');
    }
    // Return essential info needed by the request context
    // Ensure the email property exists in your JWT payload generated by Supabase
    return { userId: payload.sub, email: payload.email /* add other relevant fields like role if present */ }; 
  }
} 